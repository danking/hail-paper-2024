@online{pcsk9-insights,
  author = {Roger S. Blumenthal and Seth S. Martin and Parag H. Joshi},
  title = {The fascinating story of PCSK9 inhibition: Insights and perspective from ACC},
  year = 1999,
  url = {https://www.healio.com/news/cardiology/20150821/10_3928_1081_597x_20140101_08_1343305},
  urldate = {2014-05-01}
}

@ARTICLE{Abifadel2003-lb,
  title     = "Mutations in {PCSK9} cause autosomal dominant
               hypercholesterolemia",
  author    = "Abifadel, Marianne and Varret, Mathilde and Rab{\`e}s,
               Jean-Pierre and Allard, Delphine and Ouguerram, Khadija and
               Devillers, Martine and Cruaud, Corinne and Benjannet, Suzanne
               and Wickham, Louise and Erlich, Dani{\`e}le and Derr{\'e},
               Aur{\'e}lie and Vill{\'e}ger, Ludovic and Farnier, Michel and
               Beucler, Isabel and Bruckert, Eric and Chambaz, Jean and Chanu,
               Bernard and Lecerf, Jean-Michel and Luc, Gerald and Moulin,
               Philippe and Weissenbach, Jean and Prat, Annick and Krempf,
               Michel and Junien, Claudine and Seidah, Nabil G and Boileau,
               Catherine",
  abstract  = "Autosomal dominant hypercholesterolemia (ADH; OMIM144400), a
               risk factor for coronary heart disease, is characterized by an
               increase in low-density lipoprotein cholesterol levels that is
               associated with mutations in the genes LDLR (encoding
               low-density lipoprotein receptor) or APOB (encoding
               apolipoprotein B). We mapped a third locus associated with ADH,
               HCHOLA3 at 1p32, and now report two mutations in the gene PCSK9
               (encoding proprotein convertase subtilisin/kexin type 9) that
               cause ADH. PCSK9 encodes NARC-1 (neural apoptosis regulated
               convertase), a newly identified human subtilase that is highly
               expressed in the liver and contributes to cholesterol
               homeostasis.",
  journal   = "Nat. Genet.",
  publisher = "Springer Science and Business Media LLC",
  volume    =  34,
  number    =  2,
  pages     = "154--156",
  month     =  jun,
  year      =  2003,
  language  = "en"
}



@ARTICLE{Hall2013-us,
  title     = "Genetics: a gene of rare effect",
  author    = "Hall, Stephen S",
  journal   = "Nature",
  publisher = "Springer Science and Business Media LLC",
  volume    =  496,
  number    =  7444,
  pages     = "152--155",
  month     =  apr,
  year      =  2013,
  language  = "en"
}

@inbook{fourthparadigm-chapter-1,
  title     = "The fourth paradigm: Data-intensive scientific discovery",
  author    = "Hey, Tony",
  publisher = "Microsoft Research",
  month     =  oct,
  year      =  2009,
  chapter   = "1"
}

@unpublished{bge,
  author = "Benjamin M Neale",
  title  = "Blended-Genome Exome"
}

@unpublished{vcf4.3,
  author = "Global Alliance for Genomics \& Health",
  title = "The Variant Call Format Specification VCFv4.3 and BCFv2.2",
  url = "https://samtools.github.io/hts-specs/VCFv4.3.pdf"
}

@unpublished{gvcf,
  author = "Derek Caetano-Anolles",
  title = "GVCF - Genomic Variant Call Format",
  url = "https://gatk.broadinstitute.org/hc/en-us/articles/360035531812-GVCF-Genomic-Variant-Call-Format"
}

@article{evaluating-query-languages-and-systems-for-hep,
  author = {Graur, Dan and M\"{u}ller, Ingo and Proffitt, Mason and Fourny, Ghislain and Watts, Gordon T. and Alonso, Gustavo},
  title = {Evaluating Query Languages and Systems for High-Energy Physics Data},
  year = {2021},
  issue_date = {October 2021},
  publisher = {VLDB Endowment},
  volume = {15},
  number = {2},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/3489496.3489498},
  doi = {10.14778/3489496.3489498},
  abstract = {In the domain of high-energy physics (HEP), query languages in general and SQL in particular have found limited acceptance. This is surprising since HEP data analysis matches the SQL model well: the data is fully structured and queried using mostly standard operators. To gain insights on why this is the case, we perform a comprehensive analysis of six diverse, general-purpose data processing platforms using an HEP benchmark. The result of the evaluation is an interesting and rather complex picture of existing solutions: Their query languages vary greatly in how natural and concise HEP query patterns can be expressed. Furthermore, most of them are also between one and two orders of magnitude slower than the domain-specific system used by particle physicists today. These observations suggest that, while database systems and their query languages are in principle viable tools for HEP, significant work remains to make them relevant to HEP researchers.},
  journal = {Proc. VLDB Endow.},
  month = {oct},
  pages = {154–168},
  numpages = {15}
}

@article{modin,
  title={Towards Scalable Dataframe Systems},
  author={Petersohn, Devin and Macke, Stephen and Xin, Doris and Ma, William and Lee, Doris and Mo, Xiangxi and Gonzalez, Joseph E and Hellerstein, Joseph M and Joseph, Anthony D and Parameswaran, Aditya},
  journal={Proceedings of the VLDB Endowment},
  volume={13},
  number={11}
}


@article{vaex,
  title={Vaex: big data exploration in the era of gaia},
  author={Breddels, Maarten A and Veljanoski, Jovan},
  journal={Astronomy \& Astrophysics},
  volume={618},
  pages={A13},
  year={2018},
  publisher={EDP Sciences}
}

@unpublished{datafusion,
  author="Apache Foundation",
  title="Apache Arrow DataFusion",
  url="https://arrow.apache.org/datafusion/"
}

@article{velox,
author = {Pedreira, Pedro and Erling, Orri and Basmanova, Masha and Wilfong, Kevin and Sakka, Laith and Pai, Krishna and He, Wei and Chattopadhyay, Biswapesh},
title = {Velox: Meta's Unified Execution Engine},
year = {2022},
issue_date = {August 2022},
publisher = {VLDB Endowment},
volume = {15},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3554821.3554829},
doi = {10.14778/3554821.3554829},
abstract = {The ad-hoc development of new specialized computation engines targeted to very specific data workloads has created a siloed data landscape. Commonly, these engines share little to nothing with each other and are hard to maintain, evolve, and optimize, and ultimately provide an inconsistent experience to data users. In order to address these issues, Meta has created Velox, a novel open source C++ database acceleration library. Velox provides reusable, extensible, high-performance, and dialect-agnostic data processing components for building execution engines, and enhancing data management systems. The library heavily relies on vectorization and adaptivity, and is designed from the ground up to support efficient computation over complex data types due to their ubiquity in modern workloads. Velox is currently integrated or being integrated with more than a dozen data systems at Meta, including analytical query engines such as Presto and Spark, stream processing platforms, message buses and data warehouse ingestion infrastructure, machine learning systems for feature engineering and data preprocessing (PyTorch), and more. It provides benefits in terms of (a) efficiency wins by democratizing optimizations previously only found in individual engines, (b) increased consistency for data users, and (c) engineering efficiency by promoting reusability.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {3372–3384},
numpages = {13}
}

@inproceedings{duckdb,
author = {Raasveldt, Mark and M\"{u}hleisen, Hannes},
title = {DuckDB: An Embeddable Analytical Database},
year = {2019},
isbn = {9781450356435},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3299869.3320212},
doi = {10.1145/3299869.3320212},
abstract = {The immense popularity of SQLite shows that there is a need for unobtrusive in-process data management solutions. However, there is no such system yet geared towards analytical workloads. We demonstrate DuckDB, a novel data management system designed to execute analytical SQL queries while embedded in another process. In our demonstration, we pit DuckDB against other data management solutions to showcase its performance in the embedded analytics scenario. DuckDB is available as Open Source software under a permissive license.},
booktitle = {Proceedings of the 2019 International Conference on Management of Data},
pages = {1981–1984},
numpages = {4},
location = {Amsterdam, Netherlands},
series = {SIGMOD '19}
}

@unpublished{hashicorp1m,
  author="Hashicorp",
  title="The Million Container Challenge",
  url="https://www.hashicorp.com/c1m"
}

@unpublished{hashicorp2m,
  author="Hashicorp",
  title="The Two Million Container Challenge",
  url="https://www.hashicorp.com/c2m"
}

@unpublished{openai2500,
  author="Christopher Berner",
  title="Scaling Kubernetes to 2,500 nodes",
  url="https://openai.com/research/scaling-kubernetes-to-2500-nodes"
}

@unpublished{openai7500,
  author="Eric Sigler and Benjamin Chess",
  title="Scaling Kubernetes to 7,500 nodes",
  url="https://openai.com/research/scaling-kubernetes-to-7500-nodes"
}

@article{elemental,
author = {Poulson, Jack and Marker, Bryan and van de Geijn, Robert A. and Hammond, Jeff R. and Romero, Nichols A.},
title = {Elemental: A New Framework for Distributed Memory Dense Matrix Computations},
year = {2013},
issue_date = {February 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {2},
issn = {0098-3500},
url = {https://doi.org/10.1145/2427023.2427030},
doi = {10.1145/2427023.2427030},
abstract = {Parallelizing dense matrix computations to distributed memory architectures is a well-studied subject and generally considered to be among the best understood domains of parallel computing. Two packages, developed in the mid 1990s, still enjoy regular use: ScaLAPACK and PLAPACK. With the advent of many-core architectures, which may very well take the shape of distributed memory architectures within a single processor, these packages must be revisited since the traditional MPI-based approaches will likely need to be extended. Thus, this is a good time to review lessons learned since the introduction of these two packages and to propose a simple yet effective alternative. Preliminary performance results show the new solution achieves competitive, if not superior, performance on large clusters.},
journal = {ACM Trans. Math. Softw.},
month = {feb},
articleno = {13},
numpages = {24},
keywords = {Linear algebra, high-performance, libraries, parallel computing}
}

@unpublished{hydrogen,
  author="Lawrence Livermore National Laboratories",
  title="Hydrogen",
  url="https://github.com/LLNL/Elemental"
}

@article{momms,
  title={The MOMMS family of matrix multiplication algorithms},
  author={Smith, Tyler M and van de Geijn, Robert A},
  journal={arXiv preprint arXiv:1904.05717},
  year={2019},
  url="https://arxiv.org/pdf/1904.05717"
}

@inproceedings{numpywren,
  title={Serverless linear algebra},
  author={Shankar, Vaishaal and Krauth, Karl and Vodrahalli, Kailas and Pu, Qifan and Recht, Benjamin and Stoica, Ion and Ragan-Kelley, Jonathan and Jonas, Eric and Venkataraman, Shivaram},
  booktitle={Proceedings of the 11th ACM Symposium on Cloud Computing},
  pages={281--295},
  year={2020}
}

@article{root,
  title = {ROOT — An object oriented data analysis framework},
  journal = {Nuclear Instruments and Methods in Physics Research Section A: Accelerators, Spectrometers, Detectors and Associated Equipment},
  volume = {389},
  number = {1},
  pages = {81-86},
  year = {1997},
  note = {New Computing Techniques in Physics Research V},
  issn = {0168-9002},
  doi = {https://doi.org/10.1016/S0168-9002(97)00048-X},
  url = {https://www.sciencedirect.com/science/article/pii/S016890029700048X},
  author = {Rene Brun and Fons Rademakers},
  abstract = {The ROOT system in an Object Oriented framework for large scale data analysis. ROOT written in C++, contains, among others, an efficient hierarchical OO database, a C++ interpreter, advanced statistical analysis (multi-dimensional histogramming, fitting, minimization, cluster finding algorithms) and visualization tools. The user interacts with ROOT via a graphical user interface, the command line or batch scripts. The command and scripting language is C++ (using the interpreter) and large scripts can be compiled and dynamically linked in. The OO database design has been optimized for parallel access (reading as well as writing) by multiple processes.}
}@article{10.1145/773473.178258,
author = {Johnson, Richard and Pearson, David and Pingali, Keshav},
title = {The Program Structure Tree: Computing Control Regions in Linear Time},
year = {1994},
issue_date = {June 1994},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/773473.178258},
doi = {10.1145/773473.178258},
abstract = {In this paper, we describe the program structure tree (PST), a hierarchical representation of program structure based on single entry single exit (SESE) regions of the control flow graph. We give a linear-time algorithm for finding SESE regions and for building the PST of arbitrary control flow graphs (including irreducible ones). Next, we establish a connection between SESE regions and control dependence equivalence classes, and show how to use the algorithm to find control regions in linear time. Finally, we discuss some applications of the PST. Many control flow algorithms, such as construction of Static Single Assignment form, can be speeded up by applying the algorithms in a divide-and-conquer style to each SESE region on its own. The PST is also used to speed up data flow  analysis by exploiting “sparsity”. Experimental results from the Perfect Club and SPEC89 benchmarks confirm that the PST approach finds and exploits program structure.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {171–185},
numpages = {15}
}

@inproceedings{pst,
author = {Johnson, Richard and Pearson, David and Pingali, Keshav},
title = {The Program Structure Tree: Computing Control Regions in Linear Time},
year = {1994},
isbn = {089791662X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/178243.178258},
doi = {10.1145/178243.178258},
abstract = {In this paper, we describe the program structure tree (PST), a hierarchical representation of program structure based on single entry single exit (SESE) regions of the control flow graph. We give a linear-time algorithm for finding SESE regions and for building the PST of arbitrary control flow graphs (including irreducible ones). Next, we establish a connection between SESE regions and control dependence equivalence classes, and show how to use the algorithm to find control regions in linear time. Finally, we discuss some applications of the PST. Many control flow algorithms, such as construction of Static Single Assignment form, can be speeded up by applying the algorithms in a divide-and-conquer style to each SESE region on its own. The PST is also used to speed up data flow  analysis by exploiting “sparsity”. Experimental results from the Perfect Club and SPEC89 benchmarks confirm that the PST approach finds and exploits program structure.},
booktitle = {Proceedings of the ACM SIGPLAN 1994 Conference on Programming Language Design and Implementation},
pages = {171–185},
numpages = {15},
location = {Orlando, Florida, USA},
series = {PLDI '94}
}

