\contentsline {section}{\numberline {1}{Introduction}}{4}{section.1}%
\contentsline {subsection}{\numberline {1.1}{Genetics and Genomics}}{4}{subsection.1.1}%
\contentsline {subsection}{\numberline {1.2}{The Three Phases of Data-Intensive Science}}{4}{subsection.1.2}%
\contentsline {subsection}{\numberline {1.3}{Genomic Data Types}}{5}{subsection.1.3}%
\contentsline {subsection}{\numberline {1.4}{Genomic Tertiary Analysis}}{5}{subsection.1.4}%
\contentsline {subsection}{\numberline {1.5}{The Hail System}}{6}{subsection.1.5}%
\contentsline {subsection}{\numberline {1.6}{The Importance of Dataframes}}{8}{subsection.1.6}%
\contentsline {subsection}{\numberline {1.7}{Contributions}}{8}{subsection.1.7}%
\contentsline {section}{\numberline {2}{Background and Related Work}}{9}{section.2}%
\contentsline {subsection}{\numberline {2.1}{Workflow Languages, Workflow Engines, and Serverless Engines}}{9}{subsection.2.1}%
\contentsline {subsection}{\numberline {2.2}{Analytical Query Languages and Engines}}{10}{subsection.2.2}%
\contentsline {subsection}{\numberline {2.3}{Linear Algebra Engines}}{11}{subsection.2.3}%
\contentsline {subsection}{\numberline {2.4}{Relational Algebra on Tensors}}{11}{subsection.2.4}%
\contentsline {subsection}{\numberline {2.5}{Partitioned Datasets}}{11}{subsection.2.5}%
\contentsline {subsection}{\numberline {2.6}{The Essence of the Cloud}}{12}{subsection.2.6}%
\contentsline {section}{\numberline {3}{Hail Query}}{12}{section.3}%
\contentsline {subsection}{\numberline {3.1}{At-rest big data type format}}{12}{subsection.3.1}%
\contentsline {subsection}{\numberline {3.2}{At-rest small data type format}}{12}{subsection.3.2}%
\contentsline {subsection}{\numberline {3.3}{In-memory format}}{13}{subsection.3.3}%
\contentsline {subsection}{\numberline {3.4}{Expression language}}{13}{subsection.3.4}%
\contentsline {subsection}{\numberline {3.5}{Expression language DSL}}{13}{subsection.3.5}%
\contentsline {subsection}{\numberline {3.6}{Randomness}}{13}{subsection.3.6}%
\contentsline {subsection}{\numberline {3.7}{Relational and linear algebra}}{13}{subsection.3.7}%
\contentsline {subsubsection}{\numberline {3.7.1}{Filtered entries}}{14}{subsubsection.3.7.1}%
\contentsline {subsubsection}{\numberline {3.7.2}{Matrix table joins}}{14}{subsubsection.3.7.2}%
\contentsline {subsection}{\numberline {3.8}{Architecture}}{14}{subsection.3.8}%
\contentsline {subsection}{\numberline {3.9}{Query planner}}{15}{subsection.3.9}%
\contentsline {subsection}{\numberline {3.10}{Python Client API is lazy. Operations that force execution are called "actions". Actions include: write, collect, aggregate, and export.}}{15}{subsection.3.10}%
\contentsline {subsection}{\numberline {3.11}{Lifecycle of a query}}{15}{subsection.3.11}%
\contentsline {subsection}{\numberline {3.12}{Dataset ordering}}{16}{subsection.3.12}%
\contentsline {subsection}{\numberline {3.13}{Hail at-rest format}}{17}{subsection.3.13}%
\contentsline {subsection}{\numberline {3.14}{Hail in-memory format}}{18}{subsection.3.14}%
\contentsline {subsection}{\numberline {3.15}{Shuffles, transposition, columnar storage are all inter-related}}{19}{subsection.3.15}%
\contentsline {section}{\numberline {4}{hailtop.batch}}{19}{section.4}%
\contentsline {subsection}{\numberline {4.1}{Most workflow systems designed custom languages.}}{19}{subsection.4.1}%
\contentsline {subsection}{\numberline {4.2}{In our experience, scientists are familiar with R and Python.}}{19}{subsection.4.2}%
\contentsline {subsection}{\numberline {4.3}{Exposing an API rather than a language empowers users to build the most-useful-to-them abstractions atop our API.}}{19}{subsection.4.3}%
\contentsline {subsection}{\numberline {4.4}{The simplest batch is the empty batch:}}{19}{subsection.4.4}%
\contentsline {subsection}{\numberline {4.5}{Python is used to automate creation of repetitive jobs.}}{19}{subsection.4.5}%
\contentsline {subsection}{\numberline {4.6}{The lack of higher-level "vector job" abstractions does mean particularly large batches (on the order of 10M jobs) can take tens of minutes to submit.}}{19}{subsection.4.6}%
\contentsline {section}{\numberline {5}{Hail Batch}}{19}{section.5}%
\contentsline {subsection}{\numberline {5.1}{Cost-metered, multi-tenant, spot, elastic, scalable, cloud compute engine.}}{19}{subsection.5.1}%
\contentsline {subsection}{\numberline {5.2}{The smallest unit of the system is a job.}}{19}{subsection.5.2}%
\contentsline {subsection}{\numberline {5.3}{Attempt}}{20}{subsection.5.3}%
\contentsline {subsection}{\numberline {5.4}{Batch}}{20}{subsection.5.4}%
\contentsline {subsection}{\numberline {5.5}{Billing project}}{20}{subsection.5.5}%
\contentsline {subsection}{\numberline {5.6}{Database}}{20}{subsection.5.6}%
\contentsline {subsection}{\numberline {5.7}{Available resources:}}{22}{subsection.5.7}%
\contentsline {subsection}{\numberline {5.8}{Architecture}}{22}{subsection.5.8}%
\contentsline {subsection}{\numberline {5.9}{Single threaded Python driver can manage about 90 completing jobs per second.}}{22}{subsection.5.9}%
\contentsline {subsection}{\numberline {5.10}{90 completing jobs per second}}{22}{subsection.5.10}%
\contentsline {subsection}{\numberline {5.11}{Cost-metering}}{23}{subsection.5.11}%
\contentsline {subsection}{\numberline {5.12}{Multi-tenant}}{23}{subsection.5.12}%
\contentsline {subsection}{\numberline {5.13}{Spot tolerant}}{23}{subsection.5.13}%
\contentsline {subsection}{\numberline {5.14}{Elasticity}}{23}{subsection.5.14}%
\contentsline {section}{\numberline {6}{Hailâ€™s tenets}}{26}{section.6}%
\contentsline {subsection}{\numberline {6.1}{Pervasive preference for spot instances}}{26}{subsection.6.1}%
\contentsline {subsection}{\numberline {6.2}{Vertical integration: Only rely on slow moving extremely robust third parties (e.g. the Linux kernel)}}{26}{subsection.6.2}%
\contentsline {subsection}{\numberline {6.3}{Scientists must not be subjected to operational work (cite Occupy the Cloud)}}{26}{subsection.6.3}%
\contentsline {subsection}{\numberline {6.4}{Client-Driver-Worker, adopted from PySpark, leverages the cloud but preserves the highly customizable local environment when data is small (i.e. transferred to the client).}}{26}{subsection.6.4}%
\contentsline {subsection}{\numberline {6.5}{Dataframes uber alles, SQL is not well suited to the needs of scientists (cite query languages for hep paper)}}{26}{subsection.6.5}%
\contentsline {subsection}{\numberline {6.6}{The only durable storage is cloud object storage.}}{26}{subsection.6.6}%
\contentsline {section}{\numberline {7}{Funding \& Organizational Challenges}}{26}{section.7}%
\contentsline {subsection}{\numberline {7.1}{Contributions require caching in immense knowledge of the system, in practice we see few open source contributions.}}{26}{subsection.7.1}%
\contentsline {subsection}{\numberline {7.2}{Pharma and BioTech companies use and benefit from the system, but, as of publishing, none have contributed engineering resources or funding.}}{26}{subsection.7.2}%
\contentsline {subsection}{\numberline {7.3}{Elemental was shutdown due to lack of support for the developers}}{26}{subsection.7.3}%
\contentsline {section}{\numberline {8}{Qualitative impact on science}}{26}{section.8}%
\contentsline {subsection}{\numberline {8.1}{Hail Query and the Hail VDS (cite preprint) have been used to combine as many as 955,000 exomes (cite gnomAD v4) and 350,000 genomes (cite All of Us Echo release) into analysis-ready VDSes. Exomes or genomes are sequenced and aligned per-sample. Tertiary analysis prefers a variant-major (aka feature-major) dataset; therefore, producing a VDS from sequences is essentially a very large matrix transpose. See (cite preprint) for details on this process and the VDS format.}}{26}{subsection.8.1}%
\contentsline {subsection}{\numberline {8.2}{Hail Query (historically atop the Apache Spark backend, but work is shifting to the Hail Batch backend) has powered the analysis of several large sequencing studies including Centers for Common Disease Genomics, gnomAD v2, v3, and v4, All of Us 2023 Data Freeze, Schizophrenia Exome Sequencing Meta-analysis. In all, the repository, github.com/hail-is/hail has been cited 180 times.}}{26}{subsection.8.2}%
\contentsline {subsection}{\numberline {8.3}{Hail Batch enabled a multi-ancestry analysis of 7,221 phenotypes, across six continental ancestry groups, for a total 16,119 genome-wide association studies, each study regressing the phenotypes against 30 million genomic loci. This required executing twelve million jobs across a cluster of 80,000 cores totalling over four million core-hours.}}{26}{subsection.8.3}%
\contentsline {subsection}{\numberline {8.4}{Hail Batch provides a qualitatively different experience to users than competing workflow systems. One user had this to say:}}{26}{subsection.8.4}%
\contentsline {section}{\numberline {9}{Quantitative evaluation}}{27}{section.9}%
\contentsline {subsection}{\numberline {9.1}{Single threaded}}{27}{subsection.9.1}%
\contentsline {subsection}{\numberline {9.2}{Multi-threaded}}{27}{subsection.9.2}%
\contentsline {section}{\numberline {10}{Quantitative and Qualitative Comparisons}}{27}{section.10}%
\contentsline {subsection}{\numberline {10.1}{MySQL (as a representative of the traditional RDBMS)}}{27}{subsection.10.1}%
\contentsline {subsection}{\numberline {10.2}{sqllite}}{27}{subsection.10.2}%
\contentsline {subsection}{\numberline {10.3}{BigQuery}}{27}{subsection.10.3}%
\contentsline {subsection}{\numberline {10.4}{Apache Spark}}{27}{subsection.10.4}%
\contentsline {subsection}{\numberline {10.5}{DuckDB}}{28}{subsection.10.5}%
\contentsline {subsection}{\numberline {10.6}{AWS Fargate}}{28}{subsection.10.6}%
\contentsline {subsection}{\numberline {10.7}{Cloud Run}}{28}{subsection.10.7}%
\contentsline {subsection}{\numberline {10.8}{Azure Functions}}{28}{subsection.10.8}%
\contentsline {subsection}{\numberline {10.9}{Numpywren}}{28}{subsection.10.9}%
\contentsline {subsection}{\numberline {10.10}{Ibis}}{28}{subsection.10.10}%
\contentsline {section}{\numberline {11}{Future Work}}{28}{section.11}%
\contentsline {subsection}{\numberline {11.1}{differentiable programming}}{28}{subsection.11.1}%
\contentsline {subsection}{\numberline {11.2}{import/export Arrow for zero-transcoding data transfer from one process to another.}}{28}{subsection.11.2}%
\contentsline {subsection}{\numberline {11.3}{Columnar storage}}{28}{subsection.11.3}%
\contentsline {subsection}{\numberline {11.4}{Vectorized processing}}{28}{subsection.11.4}%
\contentsline {subsection}{\numberline {11.5}{Replace SQL database}}{28}{subsection.11.5}%
\contentsline {subsection}{\numberline {11.6}{Tighter cost controls}}{28}{subsection.11.6}%
\contentsline {subsection}{\numberline {11.7}{Faster storage.}}{29}{subsection.11.7}%
\contentsline {subsection}{\numberline {11.8}{Container image extraction is also shockingly slow.}}{29}{subsection.11.8}%
\contentsline {section}{\numberline {12}{Acknowledgments}}{29}{section.12}%
\contentsline {section}{\numberline {13}{Figures}}{30}{section.13}%
\contentsline {subsection}{\numberline {13.1}{Job <- Batch <- billing project}}{30}{subsection.13.1}%
\contentsline {subsection}{\numberline {13.2}{VDS}}{30}{subsection.13.2}%
\contentsline {subsection}{\numberline {13.3}{MT}}{30}{subsection.13.3}%
\contentsline {subsection}{\numberline {13.4}{hailtop.batch example}}{30}{subsection.13.4}%
